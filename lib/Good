Future<void> approvalUserRequest(UserModel userApproval, {String? message}) async {
    _isLoading = true;
    var id = userApproval.id!.substring(0, 15);

    print(id);
    try {
      final res = await d2repository.httpClient.get(
          'messageConversations?messageType=TICKET&filter=subject:ilike:$id');

      String convId;
      if (res.body['messageConversations'] != null && res.body['messageConversations'].isNotEmpty) {
        // A conversation exists, get its ID
        convId = res.body['messageConversations'][0]['id'].toString();
      } else {
        // No conversation found, create a new one
        print("No message conversation found for id: $id. Creating a new conversation.");

        final createRes = await d2repository.httpClient.post(
          'messageConversations',
          {
            "subject": "New Conversation for User ID $id",
            "users": [userApproval.id],  // Assuming you need to add users to the conversation
            "messageType": "TICKET",
            "messages": [
              {
                "text": "Initial message for new conversation.",
                "sender": userApproval.id // The sender ID
              }
            ]
          },
        );

        // Extract the ID of the newly created conversation
        convId = createRes.body['id'].toString();
      }

      // Now proceed with the logic using the convId
      if (message == null) {
        print('This is inside if statement');
        await Future.wait([
          d2repository.httpClient.post(userApproval.url!, userApproval.payload!),
          d2repository.httpClient.delete('dataStore/dhis2-user-support', userApproval.id.toString()),
          d2repository.httpClient.post('messageConversations/$convId', 'Ombi lako limeshughulikiwa karibu!'),
          d2repository.httpClient.post('messageConversations/$convId/status?messageConversationStatus=SOLVED', ''),
        ]).whenComplete(() => _isLoading = false);
      } else {
        await Future.wait([
          d2repository.httpClient.delete('dataStore/dhis2-user-support', userApproval.id.toString()),
          d2repository.httpClient.post('messageConversations/$convId', message),
          d2repository.httpClient.post('messageConversations/$convId/status?messageConversationStatus=SOLVED', ''),
        ]).whenComplete(() => _isLoading = false);
      }
    } catch (e, stackTrace) {
      // Handle any other errors, including network issues or JSON parsing errors
      print("An error occurred: $e");
      print("Stack trace: $stackTrace");
      _isLoading = false;
    }

    notifyListeners();
  }
Future<void> get fetchUserApproval async {
  log('this is initially called');

  List<UserModel> userApprovalList = [];
  var res2;

  final res = await d2repository.httpClient.get('dataStore/dhis2-user-support');
  var list = res.body;

  for (var i = 1; i < list.length; i++) {
    if (list[i].toString().startsWith("UA")) {
      print('dataStore/dhis2-user-support/${list[i]}');
      res2 = await d2repository.httpClient.get('dataStore/dhis2-user-support/${list[i].toString()}');

      var jsonResponse = res2.body;

      if (jsonResponse is List) {
        userApprovalList.addAll(
          jsonResponse
              .where((item) => item != null)
              .map((item) {
            if (item is Map<String, dynamic>) {
              return UserModel.fromMap(item);
            } else {
              throw Exception("Unexpected item type: ${item.runtimeType}");
            }
          })
          .where((userModel) => (userModel.message?.message != null &&
                                 userModel.message?.message != 'No Subject' &&
                                 userModel.message?.subject?.split("-").last != 'No Display'))
          .toList(),
        );
      } else if (jsonResponse is Map<String, dynamic>) {
        UserModel userModel = UserModel.fromMap(jsonResponse);
        if (userModel.message?.message != null &&
            userModel.message?.message != 'No Subject' && 
            userModel.message?.subject?.split("-").last != 'No Display') {
          userApprovalList.add(userModel);
        }
      } else {
        throw Exception("Unexpected response type: ${jsonResponse.runtimeType}");
      }
    }
  }

  _userApproval = userApprovalList;
  notifyListeners();
}
