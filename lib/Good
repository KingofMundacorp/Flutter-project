 Future<void> get fetchUserApproval async {
  log('this is initially called');

  List<UserModel> userApprovalList = [];
  var res2;

  final res = await d2repository.httpClient.get('dataStore/dhis2-user-support');
  var list = res.body;

  for (var i = 1; i < list.length; i++) {
    if (list[i].toString().startsWith("UA")) {
      print('dataStore/dhis2-user-support/${list[i]}');
      res2 = await d2repository.httpClient.get('dataStore/dhis2-user-support/${list[i].toString()}');

      var jsonResponse = res2.body;

      if (jsonResponse is List) {
        userApprovalList.addAll(
          jsonResponse
              .where((item) => item != null)
              .map((item) {
            if (item is Map<String, dynamic>) {
              return UserModel.fromMap(item);
            } else {
              throw Exception("Unexpected item type: ${item.runtimeType}");
            }
          })
          .where((userModel) => (userModel.message?.message != null &&
                                 userModel.message?.message != 'No Subject' &&
                                 userModel.message?.subject?.split("-").last != 'No Display'))
          .toList(),
        );
      } else if (jsonResponse is Map<String, dynamic>) {
        UserModel userModel = UserModel.fromMap(jsonResponse);
        if (userModel.message?.message != null &&
            userModel.message?.message != 'No Subject' && 
            userModel.message?.subject?.split("-").last != 'No Display') {
          userApprovalList.add(userModel);
        }
      } else {
        throw Exception("Unexpected response type: ${jsonResponse.runtimeType}");
      }
    }
  }

  _userApproval = userApprovalList;
  notifyListeners();
}
